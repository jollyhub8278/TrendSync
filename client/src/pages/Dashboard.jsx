import { useEffect, useState } from "react";
import React from "react";
import Card from "../components/ui/Card";
import Button from "../components/ui/Button";
import MetricCard from "../components/ui/MetricCard";
import { PenSquare, Zap, Clock, Sparkles, ExternalLink } from "lucide-react";
import {
  mockMetrics,
  mockPosts,
  mockAIRecommendations,
} from "../utils/mockData";
import { useNavigate } from 'react-router-dom';


const Dashboard = ({onChangePage}) => {
  const navigate = useNavigate();
  // const [aiRecommendations, setAiRecommendations] = useState([]);

//   useEffect(() => {
//   const fetchAIInsights = async () => {
//     try {
//       const { data } = await axios.post("http://localhost:5000/api/ai/captions", {
//         topic: "improving social media engagement",
//       });
//       setAiRecommendations(data.captions.map((content, i) => ({
//         id: i,
//         content,
//         reason: "Generated by AI based on engagement strategy."
//       })));
//     } catch (err) {
//       console.error("AI dashboard fetch error", err);
//     }
//   };

//   fetchAIInsights();
// }, []);

  const mostRecentPost = [...mockPosts]
    .filter((post) => post.status === "scheduled")
    .sort(
      (a, b) =>
        new Date(b.scheduledFor).getTime() - new Date(a.scheduledFor).getTime()
    )[0];

  const topPerformingPost = [...mockPosts]
    .filter((post) => post.status === "published" && post.engagement)
    .sort((a, b) => {
      const aTotal = a.engagement
        ? a.engagement.likes + a.engagement.comments + a.engagement.shares
        : 0;
      const bTotal = b.engagement
        ? b.engagement.likes + b.engagement.comments + b.engagement.shares
        : 0;
      return bTotal - aTotal;
    })[0];

  return (
    <div className="space-y-6">
      {/* Top metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {mockMetrics.slice(0, 4).map((metric, index) => (
          <MetricCard key={index} metric={metric} />
        ))}
      </div>

      {/* Quick Actions & Upcoming Posts */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card title="Quick Actions" className="lg:col-span-1">
          <div className="space-y-3">
            <Button
              variant="primary"
              fullWidth
              icon={<PenSquare size={16} />}
              className="justify-start"
              onClick={() => onChangePage("create-post")}
            >
              Create New Post
            </Button>

            <Button
              variant="outline"
              fullWidth
              icon={<Zap size={16} />}
              className="justify-start"
              onClick={() =>
                alert("Feature coming soon: Generate Content Ideas")
              }
            >
              Generate Content Ideas
            </Button>

            <Button
              variant="outline"
              fullWidth
              icon={<Clock size={16} />}
              className="justify-start"
              onClick={() => onChangePage("calendar")}
            >
              View Scheduled Posts
            </Button>
          </div>
        </Card>

        {/* Next Scheduled Post */}
        <Card
          title="Next Scheduled Post"
          subtitle={
            mostRecentPost
              ? `Scheduled for ${new Date(
                  mostRecentPost.scheduledFor
                ).toLocaleDateString()} at ${new Date(
                  mostRecentPost.scheduledFor
                ).toLocaleTimeString([], {
                  hour: "2-digit",
                  minute: "2-digit",
                })}`
              : ""
          }
          className="lg:col-span-1"
        >
          {mostRecentPost ? (
            <div>
              <div className="flex mb-4">
                {mostRecentPost.media[0] && (
                  <img
                    src={
                      mostRecentPost.media[0].thumbnailUrl ||
                      mostRecentPost.media[0].url
                    }
                    alt="Post preview"
                    className="w-20 h-20 object-cover rounded-lg mr-3"
                  />
                )}
                <div>
                  <p className="text-sm line-clamp-2 text-gray-700">
                    {mostRecentPost.caption}
                  </p>
                  <div className="flex mt-2 gap-1">
                    {mostRecentPost.platforms.map((platform) => (
                      <span
                        key={platform}
                        className="text-xs px-2 py-0.5 bg-gray-100 text-gray-600 rounded-full"
                      >
                        {platform.charAt(0).toUpperCase() + platform.slice(1)}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
              <div className="flex justify-end">
                <Button variant="secondary" size="sm">
                  Edit Post
                </Button>
              </div>
            </div>
          ) : (
            <p className="text-gray-500">No scheduled posts found.</p>
          )}
        </Card>

        {/* Top Performing Post */}
        <Card
          title="Top Performing Post"
          subtitle="Best engagement in the last 30 days"
          className="lg:col-span-1"
        >
          {topPerformingPost && (
            <div>
              <div className="flex mb-4">
                {topPerformingPost.media[0] && (
                  <img
                    src={
                      topPerformingPost.media[0].thumbnailUrl ||
                      topPerformingPost.media[0].url
                    }
                    alt="Post preview"
                    className="w-20 h-20 object-cover rounded-lg mr-3"
                  />
                )}
                <div>
                  <p className="text-sm line-clamp-2 text-gray-700">
                    {topPerformingPost.caption}
                  </p>
                  <div className="flex flex-wrap gap-4 mt-2">
                    <div className="flex items-center">
                      <span className="text-red-500 mr-1">â™¥</span>
                      <span className="text-xs font-medium">
                        {topPerformingPost.engagement?.likes || 0}
                      </span>
                    </div>
                    <div className="flex items-center">
                      <span className="text-blue-500 mr-1">ðŸ’¬</span>
                      <span className="text-xs font-medium">
                        {topPerformingPost.engagement?.comments || 0}
                      </span>
                    </div>
                    <div className="flex items-center">
                      <span className="text-green-500 mr-1">â†—</span>
                      <span className="text-xs font-medium">
                        {topPerformingPost.engagement?.shares || 0}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <div className="flex justify-end">
                <Button
                  variant="outline"
                  size="sm"
                  icon={<ExternalLink size={14} />}
                >
                  View Details
                </Button>
              </div>
            </div>
          )}
        </Card>
      </div>

      {/* AI Recommendations */}
      <Card
        title="AI Recommendations"
        subtitle="Smart suggestions to improve your social media strategy"
        className="border-blue-100"
      >
        <div className="space-y-4">
          {/* {aiRecommendations.map((recommendation) => ( */}
          {mockAIRecommendations.map((recommendation) => (
            <div
              key={recommendation.id}
              className="flex p-3 bg-blue-50 rounded-lg border border-blue-100"
            >
              <div className="flex-shrink-0 mr-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Sparkles size={18} className="text-blue-600" />
                </div>
              </div>
              <div>
                <p className="text-sm text-gray-800 font-medium">
                  {recommendation.content}
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {recommendation.reason}
                </p>
              </div>
            </div>
          ))}
        </div>
        <div className="mt-4 flex justify-end">
          <Button variant="secondary" size="sm">
            View All Recommendations
          </Button>
        </div>
      </Card>
    </div>
  );
};

export default Dashboard;
